DEBUG: Emitted: define i32 @main(){
DEBUG: Emitted: entry_label:
DEBUG: Emitted: %t0 = add i8 0, 0
DEBUG: Emitted: %i = alloca i8
DEBUG: Emitted: store i8 %t0, i8* %i
DEBUG: Emitted: while_entry::
DEBUG: Emitted: %t1 = load i8, i8* %i
DEBUG: Emitted: %t2 = add i32 0, 10
DEBUG: Emitted: %t4 = zext i8 %t1 to i32
DEBUG: Emitted: %t3 = icmp slt i32 %t4, %t2
DEBUG: Emitted: br i1 %t3, label %label_19, label %label_20
DEBUG: Emitted: label_19:
DEBUG: Emitted: %t5 = load i8, i8* %i
DEBUG: Emitted: %t6 = add i8 0, 1
DEBUG: Emitted: %t8 = zext i8 %t5 to i32
DEBUG: Emitted: %t9 = zext i8 %t6 to i32
DEBUG: Emitted: %t7 = add i8 %t8, %t9
DEBUG: Emitted: %t10 = trunc i32 %t7 to i8
DEBUG: Emitted: store bug at getLLVMType %t10, bug at getLLVMType* %i
DEBUG: Emitted: br label %label_14
DEBUG: Emitted: label_20:
DEBUG: Emitted: br label %label_21
DEBUG: Emitted: label_21:
errrrrror ya m3alem
DEBUG: Emitted: br label %while_entry:
DEBUG: Emitted: ret i32 0
DEBUG: Emitted: }
declare i32 @printf(i8*, ...)
declare void @exit(i32)
declare i32 @scanf(i8*, ...)
@.str_zeroDiv = internal constant [23 x i8] c"Error division by zero\00"
@global_bool_flag = global i1 false
@.str_specifier = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.int_specifier = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.int_specifier_scan = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define void @print(i8*) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
  ret void
}
define void @printi(i32) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
  ret void
}
define i32 @readi() {
  %spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0
  %num = alloca i32
  call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %num)
  %result = load i32, i32* %num
  ret i32 %result
}
define i32 @main(){
entry_label:
%t0 = add i8 0, 0
%i = alloca i8
store i8 %t0, i8* %i
while_entry: // label_6
%t1 = load i8, i8* %i // t1 = *i where i stores the value of the counter i on the stack
%t2 = add i32 0, 10 // t2=10
%t4 = zext i8 %t1 to i32 // so t4 is the 32 bit version of t1
%t3 = icmp slt i32 %t4, %t2 // comparing 32bit of t4 and t2, t3=1 if t4 is still less than t2 meaning i<10
br i1 %t3, label %label_19, label %label_20 // if t3=1 branch to label_19 else label_20
label_19:
%t5 = load i8, i8* %i
%t6 = add i8 0, 1
%t8 = zext i8 %t5 to i32
%t9 = zext i8 %t6 to i32
%t7 = add i8 %t8, %t9 // !! why this happened? -> maybe if i fix t7 to i32 then this would work?
%t10 = trunc i32 %t7 to i8 // !! 
store bug at getLLVMType %t10, bug at getLLVMType* %i
br label %label_14
label_20:
br label %label_21
label_21:
br label %while_entry:
ret i32 0
}
