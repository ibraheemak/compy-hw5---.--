declare i32 @printf(i8*, ...)
declare void @exit(i32)
declare i32 @scanf(i8*, ...)
@.str_zeroDiv = internal constant [23 x i8] c"Error division by zero\00"
@global_bool_flag = global i1 false
@.str_specifier = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.int_specifier = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.int_specifier_scan = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define void @print(i8*) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
  ret void
}
define void @printi(i32) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
  ret void
}
define i32 @readi() {
  %spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0
  %num = alloca i32
  call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %num)
  %result = load i32, i32* %num
  ret i32 %result
}
@.t11 = internal constant [2 x i8] c"*\00"
define i32 @main(){
%i = alloca i8
store i8 , i8* %i
%t0 = load i8, i8* %i
%t1 = add i32 0, 10
%t3 = zext i8 %t0 to i32
%t2 = icmp slt i32 %t3, %t1
label_14:
br i1 %t2, label %label_11, label %label_12
label_11:
%t4 = load i8, i8* %i
call void @printi(i8 %t4)
%t5 = load i8, i8* %i
%t6 = add i32 0, 1
%t8 = zext i8 %t5 to i32
%t7 = add i32 %t8, %t6
%t9 = add i32 0, 10
%t10 = icmp slt i32 %t7, %t9
br i1 %t10, label %label_33, label %label_34
label_33:
call void @print(i8* getelementptr ([2 x i8], [2 x i8]* @.t11, i32 0, i32 0))
br label %label_35
label_34:
br label %label_35
label_35:
%t12 = load i8, i8* %i
%t14 = zext i8 %t12 to i32
%t15 = zext i8  to i32
%t13 = add i8 %t14, %t15
%t16 = trunc i32 %t13 to i8
store bug at getLLVMType %t16, bug at getLLVMType* %i
br label %label_55
label_12:
label_56:
ret i32 0
}
