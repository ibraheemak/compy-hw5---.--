
%{
    #include <iostream>
    using namespace std;
    int yylex();
    void yyerror(const char*);
    #include "hw3_output.hpp"
    #include "output.hpp"
    extern int yylineno;
    using namespace output;
    int loopDepth = 0;
    #include "source.hpp"
    #include "CheckFunctions.h"
    TablesStack* tableStack=new TablesStack;
    offsetStack* offsettStack=new offsetStack;
    #define YYERROR_VERBOSE 1 
    /* //for tests:  #define YYDEBUG 1 */
    string global_exp_type = "";
    ExpNode* global_Exp = nullptr;
    string global_label="";
    #include "cg.hpp"
    #include "helper.hpp"
    #include <stack>
    stack<ExpNode*> globalExpStack;
    std::stack<ExpNode*> loopEntryLabels; 

%}



%nonassoc INT BYTE B BOOL  TRUE FALSE RETURN IF  WHILE BREAK CONTINUE SC LBRACE RBRACE ID NUM STRING
%right ASSIGN
%left OR
%left AND
%left  equality
%left  relational
%left  additive
%left  multiplicative
%right NOT
%left LPAREN
%left RPAREN
%right ELSE
%token COMMA


%%




Program: M1 Statements 
       {
         checkMainFunction(*tableStack);

         printProductionRule(1);
       }
       ;

M1: %empty
  {
    //createNewScope(*tableStack);  // Create global scope //check
    //offsettStack->push_offset(0);  // Initialize offset stack for global scope // check

    vector<string> printParmType = {"string"};
    addFunctionToGlobalScope(*tableStack, "print", "void", printParmType);
    
    vector<string> printiParmType = {"int"};
    addFunctionToGlobalScope(*tableStack, "printi", "void", printiParmType);
    
    vector<string> readiParmType = {"int"};  
    addFunctionToGlobalScope(*tableStack, "readi", "int", readiParmType);
  }
  ;

//////////////////////////////////////////////////////////////////////////////////

Statements: Statement { printProductionRule(2);
                        // Debug: Ensure no type checks are done here directly.
              //for tests: cout << "Reducing Statements -> Statements Statement at line " << yylineno << endl; 
              } ///////delete }
          | Statements Statement { printProductionRule(3);
                        // Debug: Ensure no type checks are done here directly.
              //for tests: cout << "Reducing Statements -> Statements Statement at line " << yylineno << endl; 
              } ///////delete

          ;
// need to check assignments if all check the same things, each one cover one check out of many
// int to bool or bool to int !!!
Statement: LBRACE M_NEW_SCOPE Statements RBRACE 
         {
           printProductionRule(4);
           exitScope(*tableStack);
           offsettStack->pop_offset(yylineno);
         }
         | Type ID SC 
         {
           string varName = static_cast<IdentifierStr*>($2)->id;
           string varType = static_cast<TNode*>($1)->type;
           string llvmType = getLLVMType(varType);
           string llvmVarName = freshVar() +"_"+ varName;
           CodeBuffer::instance().emit(llvmVarName + " = alloca " + llvmType);
           
           // Initialize with default value
           if (varType == "bool") {
             CodeBuffer::instance().emit("store i1 false, i1* " + llvmVarName);
           } else if (varType == "int" || varType == "byte") {
             CodeBuffer::instance().emit("store " + llvmType + " 0, " + llvmType + "* " + llvmVarName);
           }
           
           checkVariableDeclaration(*tableStack, static_cast<IdentifierStr*>($2)->id, yylineno);
           addSymbolToCurrentScope(*tableStack, varName, varType, offsettStack->top_offset(yylineno),llvmVarName);
           offsettStack->update_top_offset();
           delete static_cast<IdentifierStr*>($2);
           delete static_cast<TNode*>($1);
           printProductionRule(5);
         }
         | Type ID ASSIGN Exp SC
          {
          string varName = static_cast<IdentifierStr*>($2)->id;
          string varType = static_cast<TNode*>($1)->type;
          string expType = $4->type;
          checkVariableDeclaration(*tableStack, varName, yylineno);
          checkAssignment(varType, expType, yylineno);
          string llvmType = getLLVMType(varType);
          string llvmVarName =  freshVar() +"_"+ varName;

          if (varType == "bool" && static_cast<ExpNode*>($4)->llvm_var.empty()) {
              string allocLabel = CodeBuffer::instance().freshLabel();
              
              // Emit the true label
              CodeBuffer::instance().emit(static_cast<ExpNode*>($4)->true_label + ":");
              CodeBuffer::instance().emit("store i1 true, i1* @global_bool_flag");  // Or %bool_flag if using a local variable
              CodeBuffer::instance().emit("br label %" + allocLabel);

              // Emit the false label
              CodeBuffer::instance().emit(static_cast<ExpNode*>($4)->false_label + ":");
              CodeBuffer::instance().emit("store i1 false, i1* @global_bool_flag");  // Or %bool_flag if using a local variable
              CodeBuffer::instance().emit("br label %" + allocLabel);

              // Emit the alloc label
              string tempFinalBool = freshVar();
              CodeBuffer::instance().emit(allocLabel + ":");
              CodeBuffer::instance().emit(llvmVarName + " = alloca " + llvmType);
              CodeBuffer::instance().emit(tempFinalBool + " = load i1, i1* @global_bool_flag");
              CodeBuffer::instance().emit("store i1 " + tempFinalBool + ", i1* " + llvmVarName);
          } else {
              // Handle direct expressions
              if (varType == "int" && expType == "byte") {
                  string extendedVar = freshVar();
                  CodeBuffer::instance().emit(extendedVar + " = zext i8 " + $4->llvm_var + " to i32");
                  CodeBuffer::instance().emit(llvmVarName + " = alloca " + llvmType);
                  CodeBuffer::instance().emit("store i32 " + extendedVar + ", i32* " + llvmVarName);
              } else {
                  CodeBuffer::instance().emit(llvmVarName + " = alloca " + llvmType);
                  CodeBuffer::instance().emit("store " + llvmType + " " + $4->llvm_var + ", " + llvmType + "* " + llvmVarName);
              }
            }

          addSymbolToCurrentScope(*tableStack, varName, varType, offsettStack->top_offset(yylineno),llvmVarName);
          offsettStack->update_top_offset();
          delete static_cast<IdentifierStr*>($2);
          delete static_cast<TNode*>($1);
          delete $4;
          printProductionRule(6);
      }
         | ID ASSIGN Exp SC
        {
           
           string idType = getSymbolType(*tableStack, static_cast<IdentifierStr*>($1)->id);
           if (idType.empty()) {
             output::errorUndef(yylineno, static_cast<IdentifierStr*>($1)->id);
             exit(0);
           }
           checkAssignment(idType, $3->type, yylineno);
           
           string varName = static_cast<IdentifierStr*>($1)->id;
           string llvmVarName = getSymbolLLVMVarName(*tableStack, varName);
           string varType = static_cast<TNode*>($3)->type;
           string llvmType = getLLVMType(varType);
           string endlabel=CodeBuffer::instance().freshLabel();

            if (varType == "bool" && static_cast<ExpNode*>($3)->llvm_var.empty()) {
              
              // Emit the true label
              CodeBuffer::instance().emit(static_cast<ExpNode*>($3)->true_label + ":");
              CodeBuffer::instance().emit("store i1 true, i1* " + llvmVarName); // Or %bool_flag if using a local variable
              CodeBuffer::instance().emit("br label %" + endlabel);

              // Emit the false label
              CodeBuffer::instance().emit(static_cast<ExpNode*>($3)->false_label + ":");
              CodeBuffer::instance().emit("store i1 false, i1* " + llvmVarName);  // Or %bool_flag if using a local variable
              CodeBuffer::instance().emit("br label %" + endlabel);

              // Emit the endlabel label
              CodeBuffer::instance().emit(endlabel + ":");
            }else {
              // Handle regular assignments
              CodeBuffer::instance().emit("store " + llvmType + " " + static_cast<ExpNode*>($3)->llvm_var + ", " + llvmType + "* " + llvmVarName);
            }



    
           }
         | Call SC { printProductionRule(8); }
         | RETURN SC 
         {
           checkReturnStatement(*tableStack, "void", yylineno);
           printProductionRule(9);
         }
         | IF LPAREN Exp RPAREN  M_CHECK_IF_BOOL_andAddTrueLabel M_NEW_SCOPE Statement CLOSE_SCOPE
         {
           ExpNode* globalExp = globalExpStack.top();
           globalExpStack.pop();

           string next_label = static_cast<ExpNode*>($3)->next_label;

           CodeBuffer::instance().emit(globalExp->false_label + ":");
           CodeBuffer::instance().emit("br label %" + next_label);
          // CodeBuffer::instance().emit("AAAAAAAAAASSSSAAAAAAAAASADSACASDA");
           // Emit the next label where both branches converge
           CodeBuffer::instance().emit(next_label + ":");
           
           printProductionRule(10);
           delete $3;
         }
         | IF LPAREN Exp RPAREN M_CHECK_IF_BOOL_andAddTrueLabel M_NEW_SCOPE Statement CLOSE_SCOPE ELSE M_NEW_SCOPE M_ADD_FALSE_LABEL Statement CLOSE_SCOPE
         {
           ExpNode* globalExp = globalExpStack.top();
           globalExpStack.pop();
           if(globalExp != $3) cout << "error in global exp stack" << endl;

            string next_label = static_cast<ExpNode*>($3)->next_label;
       //    CodeBuffer::instance().emit(globalExp->next_label + ":");
          //  CodeBuffer::instance().emit("br label %" + next_label);
          // CodeBuffer::instance().emit("AAAAAAAAAASSSSAAAAAAAAASADSACASDA");
           // Emit the next label where both branches converge
           CodeBuffer::instance().emit(next_label + ":");
           
           printProductionRule(11);
           delete $3;
         
       }
          | WHILE M_ADD_WHILE_START_LABEL LPAREN  Exp RPAREN M_CHECK_WHILE_BOOL M_NEW_SCOPE_LOOP M_ADD_WHILE_TRUE_LABEL Statement {CodeBuffer::instance().emit("br label %" + ((ExpNode*)$2)->exp_startLabel);} M_ADD_WHILE_END
         {
           ExpNode* globalExp = globalExpStack.top();
           globalExpStack.pop();
           if(globalExp != $4) cout << "errrrrror ya m3alem" << endl;
          // CodeBuffer::instance().emit("br label %" + ((ExpNode*)$2)->llvm_var);  // Jump back to start of loop

           ExpNode* WhileExp = loopEntryLabels.top();
          if (!loopEntryLabels.empty()) {
          loopEntryLabels.pop();  // Remove the current loop's entry label
          }
          CodeBuffer::instance().emit("br label %" + WhileExp->next_label);
          // CodeBuffer::instance().emit(WhileExp->false_label + ":");
          CodeBuffer::instance().emit(WhileExp->next_label + ":");
           exitScope(*tableStack);
           offsettStack->pop_offset(yylineno);
           loopDepth--;
           printProductionRule(12);
           delete $3;
         }
         ;
         | BREAK SC
         {
           checkBreakStatement(loopDepth, yylineno);
           ExpNode* WhileExp = loopEntryLabels.top();
          //  CodeBuffer::instance().emit("br label %" + WhileExp->false_label);
           CodeBuffer::instance().emit("br label %" + WhileExp->next_label);
           printProductionRule(13);
         }
         ;

          | CONTINUE SC
         {
          checkContinueStatement(loopDepth, yylineno);
          if (!loopEntryLabels.empty()) {
            // string currentLoopStart = loopEntryLabels.top();
            ExpNode* WhileExp = loopEntryLabels.top();
            CodeBuffer::instance().emit("br label %" + WhileExp->exp_startLabel);
          } else {
           // Handle error: continue outside of loop
            output::errorUnexpectedContinue(yylineno);
             exit(0);
          }
          printProductionRule(14);
   }
         ;

M_CHECK_WHILE_BOOL: %empty
                  {
                    if (!isBooleanType(global_exp_type)) {
                     output::errorMismatch(yylineno);
                     exit(0);
                    }
            //        string conditionLabel = CodeBuffer::instance().freshLabel();
            //        CodeBuffer::instance().emit(conditionLabel + ":");
                    globalExpStack.push(global_Exp);
                    
                    if (!global_Exp->llvm_var.empty()) {
                     CodeBuffer::instance().emit("br i1 " + global_Exp->llvm_var + ", label %" + global_Exp->true_label + ", label %" + global_Exp->false_label);
                    //  CodeBuffer::instance().emit("br i1 M_CHECK_WHILE_BOOL" + global_Exp->llvm_var + ", label %" + global_Exp->true_label + ", label %" + global_Exp->false_label);
                    }

                  }
                  ;


M_ADD_WHILE_START_LABEL: %empty {
    // label= "while_entry";
    $$ = new ExpNode("label");
    CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->exp_startLabel); 
    CodeBuffer::instance().emit(static_cast<ExpNode*>($$)->exp_startLabel + ":");
    loopEntryLabels.push(static_cast<ExpNode*>($$));  // Push the label onto the stack
    
}
;

M_ADD_WHILE_TRUE_LABEL: %empty{
        ExpNode* globalExp = globalExpStack.top();
        CodeBuffer::instance().emit(globalExp->true_label + ":");
  }
  ;

M_ADD_WHILE_END: %empty{
    ExpNode* globalExp = globalExpStack.top();

    // ??who is label 14 and what is globalExp->exp_startLabel
    //  CodeBuffer::instance().emit("br label %" + globalExp->exp_startLabel);
    // Emit the loop exit label (false label)
    CodeBuffer::instance().emit(globalExp->false_label + ":");
    CodeBuffer::instance().emit("br label %" + globalExp->next_label); 
    CodeBuffer::instance().emit(globalExp->next_label + ":");

  }
  ;

CLOSE_SCOPE: %empty
           {
             exitScope(*tableStack);
             offsettStack->pop_offset(yylineno);
             if (!globalExpStack.empty()) {
               ExpNode* globalExp = globalExpStack.top();
               CodeBuffer::instance().emit("br label %" + globalExp->next_label);
          //     CodeBuffer::instance().emit("AAAAAAAAAAAAAAAAAA" );
             }
           };


M_NEW_SCOPE: %empty
           {
             createNewScope(*tableStack);
             offsettStack->push_offset(offsettStack->top_offset(yylineno));
           }
           ;


M_NEW_SCOPE_LOOP: %empty
                {
                  createNewScope(*tableStack);
                  offsettStack->push_offset(offsettStack->top_offset(yylineno));
                  loopDepth++;
                }
                ;
M_CHECK_IF_BOOL_andAddTrueLabel: %empty
                {
                  if (!isBooleanType(global_exp_type)) {
                   output::errorMismatch(yylineno);
                   exit(0);
                  }
                  if (!global_Exp->llvm_var.empty()) {
                //  CodeBuffer::instance().emit("br i1 M_CHECK_IF_BOOL_andAddTrueLabel " + global_Exp->llvm_var + ", label %" + global_Exp->true_label + ", label %" + global_Exp->false_label);
                 CodeBuffer::instance().emit("br i1 " + global_Exp->llvm_var + ", label %" + global_Exp->true_label + ", label %" + global_Exp->false_label);
                  }
                  CodeBuffer::instance().emit(global_Exp->true_label + ":");
                  
                  globalExpStack.push(global_Exp);
               };

// if it was a nested if then this would work but if it was only one if then it wont work so i added 
// the branching commands in "exp relation exp" and "exp equality exp"
/* try this input and see the difference
if (not (5 == 4))
    printi(1);
else
    printi(0);

if (not (5 != 4))
    if(1==1)
      printi(1);
else
    printi(0);
*/

M_ADD_FALSE_LABEL: %empty
                 {
                   ExpNode* globalExp = globalExpStack.top();
                   
                   // Emit branch to next label (end of if-else statement)
                  //  CodeBuffer::instance().emit("br label %" + globalExp->next_label);
                   
                   // Emit the false label (start of else block)
                   CodeBuffer::instance().emit(globalExp->false_label + ":");
                 };
//////////////////////////////////////////////////////////////////////////////////

Call: ID LPAREN Exp RPAREN
    {
      string funcName = static_cast<IdentifierStr*>($1)->id;
      string argType = $3->type; 
      vector<string> argTypes = {argType};
      functions* func = checkFunctionCall(*tableStack, funcName, argTypes, yylineno);
     if (!isTypeCompatible(func->all_arg[0], $3->type)) {
    output::errorPrototypeMismatch(yylineno, funcName, output::makeFunctionType(func->all_arg[0], func->ret_type));
    exit(0);
    }
      // string resultVar;
      string callInstr;
      bool extend = (funcName == "printi" && argType == "byte");
      string argLLVMType = (extend) ? "i32" : getLLVMType(argType);
      string resultVar = freshVar();
    if (funcName == "readi") {
        CodeBuffer::instance().emit(resultVar + " = call i32 @readi()");
        $$ = new ExpNode("int", resultVar);
      }
    else{
      if (argType == "string") {
           if (func->ret_type == "void"){
                callInstr="call void @" + funcName + "(i8* getelementptr ([" 
                                    + to_string(static_cast<ExpNode*>($3)->string_length) 
                                    + " x i8], [" 
                                    + to_string(static_cast<ExpNode*>($3)->string_length) 
                                    + " x i8]* " + static_cast<ExpNode*>($3)->llvm_var 
                                    + ", i32 0, i32 0))";
           }else{
                // resultVar = freshVar();
                callInstr=resultVar + " = call " +  getLLVMType(func->ret_type) + " @" + funcName + "(i8* getelementptr  ([" 
                                    + to_string(static_cast<ExpNode*>($3)->string_length) 
                                    + " x i8], [" 
                                    + to_string(static_cast<ExpNode*>($3)->string_length) 
                                    + " x i8]* " + static_cast<ExpNode*>($3)->llvm_var 
                                    + ", i32 0, i32 0))";
           }
    }else{

      //cout<<"$3->llvm_var = "<<$3->llvm_var<<endl; //debug
      if (func->ret_type == "void") {
          callInstr = "call void @" + funcName + "(" + argLLVMType + " ";
          if (extend) {
            string extendedVar = freshVar();
            CodeBuffer::instance().emit(extendedVar + " = zext i8 " + $3->llvm_var + " to i32");
            callInstr += extendedVar + ")";
          } else {
            callInstr += $3->llvm_var + ")";
          }
        } else {
          // resultVar = freshVar();
          callInstr = resultVar + " = call " + getLLVMType(func->ret_type) + " @" + funcName + "(" + argLLVMType + " ";
          if (extend) {
            string extendedVar = freshVar();
            CodeBuffer::instance().emit(extendedVar + " = zext i8 " + $3->llvm_var + " to i32");
            callInstr += extendedVar + ")";
          } else {
            callInstr += $3->llvm_var + ")";
          }
        }
      }
    }


      CodeBuffer::instance().emit(callInstr);
      $$ = new ExpNode(func->ret_type, func->ret_type == "void" ? "" : resultVar);
     // cout<<$$->type<<endl; /////////////////////delete
      printProductionRule(15);
      
      delete static_cast<IdentifierStr*>($1);
      delete $3;
    }
  ;


Type: INT { $$=new TNode("int"); printProductionRule(16); }
    | BYTE { $$=new TNode("byte"); printProductionRule(17); }
    | BOOL { $$=new TNode("bool"); printProductionRule(18); };


Exp: LPAREN Exp RPAREN { $$ = $2; printProductionRule(19); global_exp_type=$$->type; global_Exp=dynamic_cast<ExpNode*>($$);}
   | Exp additive Exp 
     { 
       checkNumericExpression($1, *tableStack);
       checkNumericExpression($3, *tableStack);
      // string type1 = $1->type;
      // string type2 = $3->type;
      //for tests: cout << type1 <<endl;
      // $$ = new ExpNode(type1 == "int" || type2 == "int" ? "int" : "byte");
       printProductionRule(20);
      
       if(static_cast<Binop*>($2)->op=="+"){
        $$=emitArithmetic("add",dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
       }

       if(static_cast<Binop*>($2)->op=="-"){
        $$=emitArithmetic("sub",dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
       }

       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);

     }
   | Exp multiplicative Exp 
     { 
       checkNumericExpression($1, *tableStack);
       checkNumericExpression($3, *tableStack);
      // string type1 = $1->type;
      // string type2 = $3->type;
      // $$ = new ExpNode(type1 == "int" || type2 == "int" ? "int" : "byte");
       printProductionRule(20);

      //  if(static_cast<Binop*>($2)->op=="*"){
      //   $$=emitArithmetic("mul",dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
      //  }
       
      //  if(static_cast<Binop*>($2)->op=="/"){
      //   $$=emitDivision(dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
      //  }
      if(static_cast<Binop*>($2)->op=="/"){
        $$ = emitDivision(dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
      } else if(static_cast<Binop*>($2)->op=="*"){
        $$ = emitArithmetic("mul",dynamic_cast<ExpNode*>($1), dynamic_cast<ExpNode*>($3));
      }

       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);
     }
   | ID 
     { 
       string varName = static_cast<IdentifierStr*>($1)->id;
       string varType = getSymbolType(*tableStack, varName);
       
       if(varType.empty() || varType=="function") {
         output::errorUndef(yylineno, varName);
         exit(0);
       }
       string llvmType = getLLVMType(varType);
       string llvmVarName = getSymbolLLVMVarName(*tableStack, varName);
       string resultVar = freshVar();
       $$ = new ExpNode(varType,resultVar); //check12
       // Emit LLVM IR for loading variable value
       if (varType == "bool"){
    //    static_cast<ExpNode*>($$)->exp_startLabel = CodeBuffer::instance().freshLabel();
       CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->exp_startLabel);
       CodeBuffer::instance().emit(static_cast<ExpNode*>($$)->exp_startLabel + ":");
       }
       CodeBuffer::instance().emit(resultVar + " = load " + llvmType + ", " + llvmType + "* " + llvmVarName);
       
       printProductionRule(21);
       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);
     }
   | Call { $$ = $1; printProductionRule(22);global_exp_type=$$->type;global_Exp=dynamic_cast<ExpNode*>($$);}
   | NUM { 
          $$ = new ExpNode("int");
          $$->llvm_var = freshVar();
          CodeBuffer::instance().emit($$->llvm_var + " = add i32 0, " + to_string(static_cast<Num*>($1)->num));
          printProductionRule(23);
          global_exp_type=$$->type;
          global_Exp=dynamic_cast<ExpNode*>($$);
        }
   | NUM B 
     { 
       int value = static_cast<Num*>($1)->num;
       if(!isLegalByteValue(value)) {
         output::errorByteTooLarge(yylineno, to_string(value));
         exit(0);
       }
       $$ = new ExpNode("byte");
       $$->llvm_var = freshVar();
       CodeBuffer::instance().emit($$->llvm_var + " = add i8 0, " + to_string(static_cast<Num*>($1)->num));
       printProductionRule(24);
       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);
     }
   | STRING { 
    
              string llvm_var_name=freshVar();
              llvm_var_name.replace(0, 1, "@.");  // Replace the first character `%` with `@.`

              string strValue = static_cast<StringLex*>($1)->s;
              strValue = strValue.substr(1, strValue.length() - 2); // Remove the first and last characters (the " ")
               $$ = new ExpNode("string", llvm_var_name, static_cast<StringLex*>($1)->s.length() -1);
              string_declare($$->llvm_var,strValue);
              printProductionRule(25);
               global_exp_type=$$->type;
               global_Exp=dynamic_cast<ExpNode*>($$);
            }
   | TRUE { 
       $$ = new ExpNode("bool");
    //   static_cast<ExpNode*>($$)->exp_startLabel=CodeBuffer::instance().freshLabel();
       CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->exp_startLabel);
       CodeBuffer::instance().emit(static_cast<ExpNode*>($$)->exp_startLabel + ":");
       CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->true_label);
       global_exp_type = $$->type;
       global_Exp = static_cast<ExpNode*>($$);
     }
   | FALSE {
       $$ = new ExpNode("bool");
     //  static_cast<ExpNode*>($$)->exp_startLabel=CodeBuffer::instance().freshLabel();
       CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->exp_startLabel);
       CodeBuffer::instance().emit(static_cast<ExpNode*>($$)->exp_startLabel + ":");
       CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->false_label);
       global_exp_type = $$->type;
       global_Exp = static_cast<ExpNode*>($$);
     }
   | NOT Exp 
     { 
      
       checkBooleanExpression($2, *tableStack);
       $$ = new ExpNode("bool");
       emitBooleanNot(static_cast<ExpNode*>($2), static_cast<ExpNode*>($$));
       static_cast<ExpNode*>($$)->exp_startLabel = static_cast<ExpNode*>($2)->exp_startLabel;
       printProductionRule(28);
       global_exp_type = $$->type;
       global_Exp = static_cast<ExpNode*>($$);

       if (!static_cast<ExpNode*>($2)->llvm_var.empty()) { //////////////////// must check this if else
        CodeBuffer::instance().emit("br i1 " + static_cast<ExpNode*>($2)->llvm_var + ", label %" + static_cast<ExpNode*>($$)->false_label + ", label %" + static_cast<ExpNode*>($$)->true_label);
    } else {
        CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->false_label);
    }
     /*
       checkBooleanExpression($2, *tableStack);
       $$ = new ExpNode("bool");
       // Flip the true and false labels
       static_cast<ExpNode*>($$)->true_label = static_cast<ExpNode*>($2)->false_label;
       static_cast<ExpNode*>($$)->false_label = static_cast<ExpNode*>($2)->true_label;
       // Use the same start label as the inner expression
       static_cast<ExpNode*>($$)->exp_startLabel = static_cast<ExpNode*>($2)->exp_startLabel;  
       // Add a conditional branch that flips the condition of the inner expression
       string condVar = static_cast<ExpNode*>($2)->llvm_var;
       if (!condVar.empty()) {
         string notCondVar = freshVar();
         CodeBuffer::instance().emit(notCondVar + " = xor i1 " + condVar + ", true");
         CodeBuffer::instance().emit("br i1 " + notCondVar + ", label %" + 
                                     static_cast<ExpNode*>($$)->true_label + ", label %" + 
                                     static_cast<ExpNode*>($$)->false_label);
       } else {
         // If there's no condition variable, just flip the branch
         CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($$)->true_label);
       }
       printProductionRule(28);
       global_exp_type = $$->type;
       global_Exp = static_cast<ExpNode*>($$);
      */
     }
  | Exp OR {CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($1)->false_label); CodeBuffer::instance().emit(static_cast<ExpNode*>($1)->false_label + ":");} Exp 
    { 
      checkBooleanExpression($1, *tableStack);
      checkBooleanExpression($4, *tableStack);
      // maybe i shoudlve let the function return a new node so we wont create unnecessary labels 
      $$ = new ExpNode("bool");
      emitBooleanOr(static_cast<ExpNode*>($1), static_cast<ExpNode*>($4), static_cast<ExpNode*>($$));
      static_cast<ExpNode*>($$)->exp_startLabel= static_cast<ExpNode*>($1)->exp_startLabel;
      printProductionRule(30);
      global_exp_type = $$->type;
      global_Exp = static_cast<ExpNode*>($$);
    }
    | Exp AND {CodeBuffer::instance().emit("br label %" + static_cast<ExpNode*>($1)->true_label); CodeBuffer::instance().emit(static_cast<ExpNode*>($1)->true_label + ":");} Exp 
    { 
      checkBooleanExpression($1, *tableStack);
      checkBooleanExpression($4, *tableStack);
      $$ = new ExpNode("bool");
      emitBooleanAnd(static_cast<ExpNode*>($1), static_cast<ExpNode*>($4), static_cast<ExpNode*>($$));
      static_cast<ExpNode*>($$)->exp_startLabel= static_cast<ExpNode*>($1)->exp_startLabel;
      printProductionRule(29);
      global_exp_type = $$->type;
      global_Exp = static_cast<ExpNode*>($$);
    }
   | Exp equality Exp 
     { 
       checkTypeMismatch($1->type, $3->type, "equality", yylineno);
       $$ = emitRelop(static_cast<Relop*>($2)->op, static_cast<ExpNode*>($1),static_cast<ExpNode*>($3));
       static_cast<ExpNode*>($$)->exp_startLabel= static_cast<ExpNode*>($1)->exp_startLabel;
       CodeBuffer::instance().emit("br i1 " + static_cast<ExpNode*>($$)->llvm_var + ", label %" + static_cast<ExpNode*>($$)->true_label + ", label %" + static_cast<ExpNode*>($$)->false_label);
      //  CodeBuffer::instance().emit("br i1 equality" + static_cast<ExpNode*>($$)->llvm_var + ", label %" + static_cast<ExpNode*>($$)->true_label + ", label %" + static_cast<ExpNode*>($$)->false_label);
       printProductionRule(31);
       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);
     }
   | Exp relational Exp 
     { 
       checkNumericExpression($1, *tableStack);
       checkNumericExpression($3, *tableStack);
       $$ = emitRelop(static_cast<Relop*>($2)->op, static_cast<ExpNode*>($1),static_cast<ExpNode*>($3));
       static_cast<ExpNode*>($$)->exp_startLabel= static_cast<ExpNode*>($1)->exp_startLabel;
       CodeBuffer::instance().emit("br i1 " + static_cast<ExpNode*>($$)->llvm_var + ", label %" + static_cast<ExpNode*>($$)->true_label + ", label %" + static_cast<ExpNode*>($$)->false_label);
      //  CodeBuffer::instance().emit("br i1 relational" + static_cast<ExpNode*>($$)->llvm_var + ", label %" + static_cast<ExpNode*>($$)->true_label + ", label %" + static_cast<ExpNode*>($$)->false_label);
       printProductionRule(31);
       global_exp_type=$$->type;
       global_Exp=dynamic_cast<ExpNode*>($$);
     }
   | LPAREN Type RPAREN Exp 
     { 
    string targetType = static_cast<TNode*>($2)->type;
    string sourceType = $4->type;
    string llvmTargetType = getLLVMType(targetType);
    string llvmSourceType = getLLVMType(sourceType);
    
    if (targetType != "int" && targetType != "byte") {
      output::errorMismatch(yylineno);
      exit(0);
    }
    if (!isTypeCompatible(targetType, sourceType, true)) {
      output::errorMismatch(yylineno);
      exit(0);
    }
    
    string resultVar = freshVar();
    if (targetType == "int" && sourceType == "byte") {
      CodeBuffer::instance().emit(resultVar + " = zext i8 " + $4->llvm_var + " to i32");
    } else if (targetType == "byte" && sourceType == "int") {
      CodeBuffer::instance().emit(resultVar + " = trunc i32 " + $4->llvm_var + " to i8");
    } else {
      resultVar = $4->llvm_var; // No conversion needed
    }
    
    $$ = new ExpNode(targetType, resultVar);
    printProductionRule(32);
    global_exp_type = $$->type;
    global_Exp = dynamic_cast<ExpNode*>($$);
     }
   ;

 

%%

void initBuiltInFunctions() {
    CodeBuffer::instance().emitGlobal("@.str_specifier = private unnamed_addr constant [4 x i8] c\"%s\\0A\\00\", align 1");
    CodeBuffer::instance().emitGlobal("@.int_specifier = private unnamed_addr constant [4 x i8] c\"%d\\0A\\00\", align 1");
    CodeBuffer::instance().emitGlobal("@.int_specifier_scan = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1");

    // print function
    CodeBuffer::instance().emitGlobal("define void @print(i8*) {");
    CodeBuffer::instance().emitGlobal("  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0");
    CodeBuffer::instance().emitGlobal("  call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)");
    CodeBuffer::instance().emitGlobal("  ret void");
    CodeBuffer::instance().emitGlobal("}");

    // printi function
    CodeBuffer::instance().emitGlobal("define void @printi(i32) {");
    CodeBuffer::instance().emitGlobal("  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0");
    CodeBuffer::instance().emitGlobal("  call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)");
    CodeBuffer::instance().emitGlobal("  ret void");
    CodeBuffer::instance().emitGlobal("}");

    // readi function
    CodeBuffer::instance().emitGlobal("define i32 @readi() {");
    CodeBuffer::instance().emitGlobal("  %spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0");
    CodeBuffer::instance().emitGlobal("  %num = alloca i32");
    CodeBuffer::instance().emitGlobal("  call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %num)");
    CodeBuffer::instance().emitGlobal("  %result = load i32, i32* %num");
    CodeBuffer::instance().emitGlobal("  ret i32 %result");
    CodeBuffer::instance().emitGlobal("}");
}

  int main(){
      // yydebug = 1; 
      CodeBuffer::instance().emit("define i32 @main(){");
      CodeBuffer::instance().emitGlobal("declare i32 @printf(i8*, ...)");
      CodeBuffer::instance().emitGlobal("declare void @exit(i32)");
      CodeBuffer::instance().emitGlobal("declare i32 @scanf(i8*, ...)");
      CodeBuffer::instance().emitGlobal("@.str_zeroDiv = internal constant [23 x i8] c\"Error division by zero\\00\"");
       CodeBuffer::instance().emitGlobal("@global_bool_flag = global i1 false");



    initBuiltInFunctions();
    CodeBuffer::instance().emit("entry_label:");
    yyparse();

      exitScope(*tableStack);

      CodeBuffer::instance().emit("ret i32 0");
      CodeBuffer::instance().emit("}");

      CodeBuffer::instance().printGlobalBuffer();
      CodeBuffer::instance().printCodeBuffer();
    
     return 0;

  }

void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}